function [R t] = lf_sog(ScanNew, ScanRef, motion, Opt)

%NDT LF-SOG algorithm. It returns a rototranslation [R t] which estimates
%the current robot displacement from the ground truth. The algorithm
%follows the paper

% Antoni BURGUERA, Yolanda GONZÁLEZ, Gabriel OLIVER
% The sNDT: A Grid-Based Likelihood Field Approach to Robust and Accurate Sonar Scan Matching Localization.
% Technical Report A-06-2007
% Departament de Matemàtiques i Informàtica (UIB)

% TODO: OPTIMIZE SCAN, RESAMPLING SCAN TO DISCARD CELL WITH TOO MANY
% READINGS

% N ITERATIONS %%%%%%%%%% TO DO: USE OPT
niter = Opt.scanmatcher.iterations;

ScanNew = ScanNew.data.localCart2D;
ScanRef = ScanRef.data.localCart2D;

sizenew = size(ScanNew,1);
sizeref = size(ScanRef,1);

u = motion.con.u;
originalp = [cos(u(2))*u(1) sin(u(2))*u(1) u(3)];
%originalp = [motion.frame.x(1) motion.frame.x(2) motion.frame.epose(6)];
p = originalp;

%We are going to use Newton's algorithm to minimize the score function. The
%idea is that the score function returns a worse value when the point is
%more distant from the Reference Scan

for i = 1:niter
    
    x = p(1);
    y = p(2);
    yaw = p(3);
    cosy = cos(yaw);
    siny = sin(yaw);
    
    grad = zeros(1,3);
    H = zeros(3,3);
    score = 0;
%DEBUG
figure
hold on
axis equal
displayPoints(ScanRef,'k');
displayPoints(ScanNew,'g');

    for j = 1:sizenew
        pn = ScanNew(j,1:2);
        
        for k = 1:sizeref

            qn = ScanRef(j,1:2);
            %add the point pn from the new scan to the approximated minimum
            %of the function (the odometry estimation).
            v(1) = x + cosy*pn(1) - siny*pn(2);
            v(2) = y + siny*pn(1) + cosy*pn(2);
            
            plot(v(1),v(2),'.b');
            
            %Jacobian of the transformation function having point pn and
            %translation x
            dv = [ 1, 0, -pn(1)*siny-cosy*pn(2);...
                   0, 1, pn(1)*cosy-siny*pn(2)];

            
            %difference with mean
            dnm = (v - qn)';               
            
            grad = grad + 2*exp( ((-dnm'*dnm)*dnm')*dv); 
            
            % Calculate the Hessian of the likelihood function
            vH = [ -pn(1)*cosy + siny*pn(2);
                -pn(1)*siny - cosy*pn(2)   ];


            dnmdv1 = dnm'*dv(:,1);
            dnmdv2 = dnm'*dv(:,2);
            dnmdv3 = dnm'*dv(:,3);
            expdnm = 2*exp(dnm*dnm');

            
            %Hessian of the function
            Hp =  [  expdnm*(-2*dnmdv1*dnmdv1)*(dv(:,1)'*dv(:,1)) ,...% D² xx
                expdnm*(-2*dnmdv1*dnmdv2)*(dv(:,1)'*dv(:,2)),... % D² xy
                expdnm*(-2*dnmdv1*dnmdv3)*(dv(:,1)*dv(:,3));... % D² xTHETA
                ...
                0,...% D² yx
                expdnm*(-2*dnmdv2*dnmdv2)*(dv(:,2)*dv(:,2)'),... % D² yy
                expdnm*(-2*dnmdv2*dnmdv3)*(dv(:,2)*dv(:,3)');... % D² yTHETA
                ...
                0,...% D² x THETA
                0,... % D² yTHETA
                expdnm*(-2*dnmdv3*dnmdv3)*(dv(:,3)*dv(:,3)' + vH)... 
                % D² THETA THETA. The second derivative is defined only in
                % this point
                ];
            
            %H is symmetric, let's fill the remaining part
            Hp(2,1) = Hp(1,2);
            Hp(3,1) = Hp(1,3);
            Hp(3,2) = Hp(2,3);
            
            H = H + Hp;
        end
        
        
        
    end
    
    % Once we have the Hessian and Gradient of the function we calculate
    % the new translation
    H
    grad
    dt = -H\grad';

    
   % Motion referenced to computed estimation
    eTm = [cos(dt(3)) -sin(dt(3)) dt(1); sin(dt(3)) cos(dt(3)) dt(2); 0 0 1];
    p = eTm*[p(1:2) 1]';
    %solution(3,1) = estimation(3)+motion(3);
    %solution = solution + estimation;
    p(3) = normAngle(dt(3)+yaw);
    
    p = p';
    %p =  p + dt';
    
end
p =  originalp + p;
t = [p(1:2) 0];
R = e2q([0 0 (p(3)) ]);
end


