function [minr assoc index] = mpAssociation(snew, sref, Opt)
%MPASSOCIATION: Given a point and a reference set, find the best matching association
%based on the Matching Point rule as defined in

%Feng Lu and Evangelos Milios. 1997. Robot Pose Estimation in Unknown
%Environments by Matching 2D Range Scans. J. Intell. Robotics Syst. 18, 3
%(March 1997), 249-275

%It works in 2D, Z is kept fixed
% MODEL = Reference Scan
% In:    
%         SNEW.cart: Nx2 points
%         SREF.cart: Nx2 points
%         OPT: options and plot data
% Out:   
%         MIND mean error
%         ASSOC association object
%         INDEX index of the points in SREF associated with the points in
%         SNEW


pset = sref.cart;
local = sref.polar;
cart = sref.cart;
pa = snew.cart;
papol = snew.polar;
pret = [];
errtot = 0;
index = [];

Br = Opt.scanmatcher.Br;

global DEBUG
if DEBUG.cpAssociation || DEBUG.all

    set(Opt.plot_r,'XData',pset(:,1),'YData',pset(:,2));
    set(Opt.plot_n,'XData',pa(:,1),'YData',pa(:,2));
%     displayPoints(pset,'g',0);
%     displayPoints(pa,'r',0);
    drawnow
end


assoc = struct('new',[],'ref',[],'dist',[]);

for j = 1:size(pa,1)
    
    p = pa(j,1:2);
    [a l] = cart2pol(p(1),p(2)); %papol(j,1);
    %l = papol(j,2);
    
    %[a l] = cart2pol(p(1),p(2)); %Transform in polar coord
    chosenp = [];        %best fitting range point
    minr = inf;                 %minor range shift found
    indexf = -1;
    
    m = size(pset,1);
    
    pret1=inf;
    pret2=inf;
    %Once we have the set, we check all adjacent points for a possible
    %association
    for i = 1:m
        %          [ap lp] = cart2pol(pset(i,1),pset(i,2));
        ap = local(i,1);
        lp = local(i,2);
        
        pp = cart(i,1:2);
        w = abs(ap-a); %normAngle(abs(ap-a)); %angular shift
        if Br(1) > 0 && w > Br(1)
            continue;
        end
        
        mp1 = [ap lp]; %Adjacent points in the reference scan
        %mp2 = seta(i,3:4);
        %interval = [mp1; mp2];
        %r1 = mp1(2); r2 = mp2(2); th1 = mp1(1); th2 = mp2(1);
        
        %Interpolate to find how the rotation of p would fit in the model
        %     r = (r1*r2*(th2-th1)) / r1*(a - th1) + r2*(th2 - a);
        
        
        
        %Chooses the most similar point in the model,the one with range
        %closest to p
        %[minv index] = min([ abs(l - interval(1,2))  abs(l - interval(2,2)) ]);
        min_v = abs(l - lp);
        %candidate = interval(index,:);
        
        %We can inverse interpolate if the interpolated adjacent scan are known
        %to intersect the point in the new scan we are consiering
        %    if (r1 > r && r2 < r) || (r2 > r && r1 < r)
        %        [mpp1x mpp1y] = pol2cart(th1,r1);
        %        [mpp2x mpp2y] = pol2cart(th2,r2);
        %        [mppx mppy] = pol2cart(a,r);
        %        figure
        %        plot([mpp1x mpp2x p(1)], [mpp1y mpp2y  p(2)], '.r', mppx,mppy, '.k');
        %        l=r;
        %        th = (l*(r1*th1 - r2*th2) + r1*r2*(th2-th1)) / l*(r1-r2);
        %        chosenp = [th l 0];
        %        minr = 0;
        %        break;
        %     end
        
        
        % minr stores the closest range we have found
        if  ptsDistance(pp,p) < Br(2) && min_v < minr
            chosenp = mp1;
            minr = min_v;
            indexf = i;
        end
        
    end
    
    %We return the minor range found and the chosen point
    if(~isempty(chosenp))
        [pret1 pret2] = pol2cart(chosenp(1),chosenp(2));
        errtot = errtot + minr;
        assoc.new = [assoc.new; pa(j,1:3)];
        assoc.ref = [assoc.ref; [pret1 pret2] pa(j,3)];
        assoc.dist = [assoc.dist; minr];
        
%         if DEBUG.mpAssociation || DEBUG.all
%             plot( [p(1) pret1 ],[p(2) pret2 ], 'k' );
%         end
        
    end
    
    
end

% if size(assoc.ref,1) < 5
%     error(' Not enough associations fuond' );
% end


minr = mean(errtot);

end



