function [mind assoc index] = cpAssociation(snew, sref, Opt)
%Given a point and a reference set, find the best matching association
%based on the Closest Point rule, search over the N points in pset the on
%with minor Euclidean distance.

pset = sref.cart;
local = sref.polar;

pa = snew.cart;
global DEBUG
if DEBUG.cpAssociation || DEBUG.all
    
    figure;
    hold on
    axis equal
    grid on
    displayPoints(pset,'g',0);
    displayPoints(pa,'r',0);
    
end

pret = [];
index = [];
errtot = 0;

assoc = struct('new',[],'ref',[],'dist',[]);

for j = 1:size(pa,1)
    
    p = pa(j,1:2);
    a = pa(j,3);
    
    
    infd = inf;
    mind = 0;
    pf = [];
    indexf = -1;
    
    for i = 2:size(pset,1)
        
        ap = local(i,1);
        w = abs(ap-a);
        
        p2 = pset(i-1,1:2); %Adjacent points in the reference scan
        p3 = pset(i,1:2);
        
        % classic Euler Distance
        d = sqrt( (p(1)-p2(1))^2 + (p(2)-p2(2))^2 );
        
        %we select the point with minor distance
        if d < infd 
            if (Opt.scanmatcher.distancethreshold && d < Opt.scanmatcher.Br(2) )
            infd = d;
            mind = infd;
            pf =  p2;
            indexf = i;
        end
        
    end
    
    if indexf > 0
        assoc.new = [assoc.new; pa(j,1:3)];
        assoc.ref = [assoc.ref; pf pa(j,3)];
        assoc.dist = [assoc.dist; mind];
        
        
        errtot = errtot + mind;
        
        
        if DEBUG.cpAssociation || DEBUG.all
            plot( [p(1) pf(1) ],[p(2) pf(2) ], 'm' )
        end
        
    end
end

if size(assoc.ref,1) < 5
    error(' Not enough associations fuond' );
end


mind = mean(errtot);

end
