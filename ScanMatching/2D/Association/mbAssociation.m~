% Function EStep
% Coputes correspondences between two scans
% In:
%   refPoints
%   newPoint
%   motion: [x y yaw]
%   prec: refPoint's precomputed stuff
% Out:
%   out:
%   A: associations
function [out, A, i] = mbAssociation(newPoints, refPoints, Opt, motion,prec)

PARAM.Bw                            = 1.57/3.0;
PARAM.Br                            = 10.1;
PARAM.L                             = 3;
PARAM.step                          = 1;
PARAM.maxDistanceInterpolation      = 0.5;
PARAM.filter                        = 1;
PARAM.projectionFilter              = 0; %!! test with 0
PARAM.associationError              = 0.1;
PARAM.maxIterations                 = 250;
PARAM.errorRatio                    = 0.0001;
PARAM.error                         = [0.0001 0.0001 0.0001];
PARAM.nIterationSmoothConvergence   = 2;

PARAM.deviation.sensor              = [0.0262 0.05]; % std deviation [angular(rad) range(m)] [+/-1.5� +/-5cm]
PARAM.deviation.motion              = [0.1 0.1 deg2rad(10)]; % motion std deviation [x(m) y(m) yaw(rad)]

x = motion.estimation(1);
y = motion.estimation(2);
yaw = motion.estimation(3);

L2 = PARAM.L^2;

% newPoints referenced to reference coordinate system
%rTn = [1 0 0; 0 1 0; 0 0 1]; %
% rTn = [cos(yaw) -sin(yaw) x; sin(yaw) cos(yaw) y; 0 0 1];
% 
% newCartesianRef = []; newPolarRef = [];
% for i=1:size(newPoints.cart,2)
%     newCartesianRef = [newCartesianRef rTn*[newPoints.cart(:,i);1]];
%     [r,theta] = cart2pol(newCartesianRef(1,i), newCartesianRef(2,i));
%     newPolarRef = [newPolarRef [r,theta]'];
% end

newCartesianRef = newPoints.cart; % (3,:) = []; % Delete 1's from normalized 2D point
newPolarRef = newPoints.polar;

global DEBUG
if DEBUG.mbAssociation || DEBUG.all
    
    figure
    hold on
    axis equal
    
    displayPoints(newCartesianRef','g');
    displayPoints(newPoints.cart','r');
    %displayPoints(refPoints.cart','k');
end

% Projection Filter (Necessari �?�?�?)
if (PARAM.projectionFilter == 1)
    counter = 2;
    for i = 2:size(newPolarRef,2)
        if (newPolarRef(1,i) >= newPolarRef(1,counter-1))
            newPolarRef(:,counter) = newPolarRef(:,i);
            newCartesianRef(:,counter) = newCartesianRef(:,i);
            counter = counter+1;
        end
    end
    newPolarRef(:,counter:size(newPolarRef,2)) = [];
    newCartesianRef(:,counter:size(newCartesianRef,2)) = [];
end

newPointsRef = struct('polar',newPolarRef,'cart',newCartesianRef);


% Build index for the windows
% L = 1; R = 1;
% Io = 1;
%
% if (newPointsRef.polar(1,Io) < refPoints.polar(1,L))
%     while(newPointsRef.polar(1,Io) + PARAM.Bw < refPoints.polar(1,L) && Io < size(newPointsRef.polar,2)-1)
%         Io = Io+1;
%     end
%     while(newPointsRef.polar(1,Io) + PARAM.Bw > refPoints.polar(1,R+1) && R < size(refPoints.polar,2)-1)
%         R = R+1;
%     end
% else
%     while(newPointsRef.polar(1,Io) - PARAM.Bw > refPoints.polar(1,L) && L < size(refPoints.polar,2)-1)
%         L = L+1;
%     end
%     R = L;
%     while(newPointsRef.polar(1,Io) + PARAM.Bw > refPoints.polar(1,R+1) && R < size(refPoints.polar,2)-1)
%         R = R+1;
%     end
% end

% Look for potential correspondeces between scans
%Associations = [];

assoc = struct('new',[],'ref',[],'dist',[],'R',[],'L',[]);

counter = 1;
R = 0;
L = 0;
for i = 1:size(newPointsRef.polar,2)
    % Keep index of the original scan ordering
    
    previousX = 0;
    previousY = 0;
    previousDist = 100000;
    p2x = newPointsRef.cart(1,i); p2y = newPointsRef.cart(2,i);
    
    for j = 2:size(refPoints.polar,2)
        
        if abs(refPoints.polar(1,j) - newPointsRef.polar(1,i)) > PARAM.Bw
            continue
        end
        q1x = refPoints.cart(1,j-1); q1y = refPoints.cart(2,j-1);
        q2x = refPoints.cart(1,j); q2y = refPoints.cart(2,j);
        
        
        dqx = prec.refdq(1,j-1); dqy = prec.refdq(2,j-1);
        dqpx = q1x-p2x; dqpy = q1y-p2y;
        a = 1/(p2x^2+p2y^2+L2);
        b = 1-a*p2y^2;
        c = 1-a*p2x^2;
        d = a*p2x*p2y;
        
        landaMin = (d*(dqx*dqpy+dqy*dqpx)+b*dqx*dqpx+c*dqy*dqpy)/(b*prec.refdq2(1,j-1)+c*prec.refdq(2,j-1)+2*d*prec.refdqxdqy(j-1));
        
        if (landaMin < 0)
            qx = q1x; qy = q1y;
        elseif (landaMin > 1)
            qx = q2x; qy = q2y;
        elseif (prec.distRef(j-1) < PARAM.maxDistanceInterpolation)
            qx = (1-landaMin)*q1x+landaMin*q2x;
            qy = (1-landaMin)*q1y+landaMin*q2y;
        else
            if (landaMin < 0.5)
                qx = q1x; qy = q1y;
            else
                qx = q2x; qy = q2y;
            end
        end
        
        % Precompute stuff to see if we have the associations
        dx = p2x-qx;
        dy = p2y-qy;
        dist = dx^2+dy^2-(dx*qy-dy*qx)^2/(qx^2+qy^2+L2);
        
        if (dist < previousDist)
            previousX = qx;
            previousY = qy;
            previousDist = dist;
        end
    end
    
    % Association compatible in distance
    if (previousDist < PARAM.Br)
       % assoc = struct('new',newPointsRef.cart(:,i),'ref',[previousX; previousY],'dist',previousDist,'R',R,'L',L);
       % Associations = [Associations assoc];
        counter = counter+1;
        
        assoc.new = [assoc.new; newPointsRef.cart(1:2,i)'];
        assoc.ref = [assoc.ref; [previousX previousY]];
        assoc.dist = [assoc.dist; previousDist];
        assoc.R = [assoc.R; R];
        assoc.L = [assoc.L; L];
        
        if DEBUG.mbAssociation || DEBUG.all
            plot( [newPointsRef.cart(1,i) previousX ],[newPointsRef.cart(2,i) previousY ], 'm' )
        end
    end
end


A = assoc;
i=[];
if(size(A.ref) < size(newPointsRef.cart,2)*PARAM.associationError)
    out = sum;
else
    out = 1;
end
