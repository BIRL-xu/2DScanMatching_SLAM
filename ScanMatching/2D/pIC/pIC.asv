%Given two scan, performs an IDC scanmatching. It returns the displacement
%between adiacent points. Being A the old scan and B the new one. The
%point set size does not match. The idea is to find the correnspondence
%between all points of B with a point of A.

%L. Montesano, J. Minguez, and L. Montano, “Probabilistic scan
%matching for motion estimation in unstructured environments,” in
%Proceedings of the IEEE/RSJ International conference on Intelligent
%Robots and Systems (IROS), (Edmonton, Canada), 2005.


function [R, t, S] = pIC(A, B, motion)

nnb = 5;
threshold = 0.5;
merr = inf;
R = [];
t = [];
S = [];
P = B;
Br = 0.5;
alfa = 1;
it=0;

% Fixed polar cov. matrix
stdsen              = [0.01 0.01]; % std deviation [angular(rad) range(m)] [+/-1.5º +/-5cm]
Ppolar = [stdsen(1)^2 0; 0 stdsen(2)^2];

PA =  [];
PB = [];

%Preprocess
ScA.cart = A.data.localpoint(:,1:2)';
ScB.cart = B.data.localpoint(:,1:2)';

for i = 1:size(ScA.cart,2);
    % Create P (cov. matrix) for both scans
    J = [cos(ScA.cart(1,i)) -ScA.cart(2,i)*sin(ScA.cart(1,i)); sin(ScA.cart(1,i)) ScA.cart(2,i)*cos(ScA.cart(1,i))];
    PA = [PA [J*Ppolar*J']];
    
end

for i = 1:size(ScB.cart,2);
    % Create P (cov. matrix) for both scans
    J = [cos(ScB.cart(1,i)) -ScB.cart(2,i)*sin(ScB.cart(1,i)); sin(ScB.cart(1,i)) ScB.cart(2,i)*cos(ScB.cart(1,i))];
    PB = [PB [J*Ppolar*J']];
end


ScA.P = PA; %A.data.covm';
ScB.P = PB; %A.data.covm';
u = motion.u;
%motion2D.estimation = [cos(u(2))*u(1) sin(u(2))*u(1) u(2)];
motion2D.estimation = [motion.x(1) motion.x(2) motion.x];
motion2D.P = motion.P2(1:3,1:3);

while  it < 10
    
    %Compute the association set
   
    [resEStep,assoc] = mahaAssociation(ScA, ScB, motion2D);

    [resMStep,solution,errorK1,nConverged] = pICRegistration(assoc,motion2D,10000,0); 
   
    motion2D.estimation = solution'
    
    merr = errorK1;
    it=it+1;
end
t = [motion2D.estimation(1) motion2D.estimation(2)];
R = r2R(motion2D.estimation(3));
    for i = 1:size(ScB.cart,2)
        S(i,1:2) = (ScB.cart(:,i)') + t ;
        S(i,3) = B.data.point(i,3);
%        %err(i)=norm(B(i,:)-C(i,:));
    end


 % %Calculate the fitline
%     int = i-nnb:1:i+nnb;
%     if (i<=nnb)
%        int  = int + (nnb - i + 1) ;
%     end
% 
%     polyfit(B(int,1),B(int,2),1);
%     
%     C = newref(B,motion);