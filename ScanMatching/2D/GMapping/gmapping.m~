function [ R t NI ] = gmapping( ScanRef, ScanNew, motion, Opt )
% GA returns a rotational and translational estimation using a genetic
% algorithm search. The algorithm is based on a series of publications.

% [1] Giorgio Grisetti, Cyrill Stachniss, and Wolfram Burgard: Improved
% Techniques for Grid Mapping with Rao-Blackwellized Particle Filters,
% IEEE Transactions on Robotics, 2006 (link)

% [2] Giorgio Grisetti, Cyrill Stachniss, and Wolfram Burgard:
% Improving Grid-based SLAM with Rao-Blackwellized Particle Filters
% by Adaptive Proposals and Selective Resampling,
% In Proc. of the IEEE International Conference on Robotics and Automation (ICRA), 2005 (link)

% The idea is to apply use a gradient descent method to search for possible
% good poses. The space of search is limited by a boundary

convg = Opt.scanmatcher.convalue;
niter = Opt.scanmatcher.iterations;

ScanNew = ScanNew.localCart;
ScanRef = ScanRef.localCart;

sizenew = size(ScanNew,1);
sizeref = size(ScanRef,1);

u = motion.con.u;
pose = motion.frame.t;
lrangle = u(2);
x0 =  cos(lrangle)*u(1);
y0 =  sin(lrangle)*u(1);
yaw0 = u(3);

ScanNewTR = applyTransform2Scan2D(ScanNew, yaw0, [x0 y0]);

% Make the occupancy grid as big as to contain both scans
[PARAM.xmin PARAM.xmax PARAM.ymin PARAM.ymax] = minmaxScan(ScanRef);
[PARAMN.xmin PARAMN.xmax PARAMN.ymin PARAMN.ymax] = minmaxScan(ScanNewTR);
PARAM.L = 0.1;  %Occupancy resolution
PARAM.type = 'binary';
PARAM.xmin = min(PARAM.xmin, PARAMN.xmin) - 1;
PARAM.xmax = max(PARAM.xmax, PARAMN.xmax) + 1;
PARAM.ymin = min(PARAM.ymin, PARAMN.ymin) - 1;
PARAM.ymax = max(PARAM.ymax, PARAMN.ymax) + 1;

Occ = makeOccupancyGrid(ScanRef, PARAM);

% Make Search Space using noise information. TODO
%Use uniform random sampling to draw the initial population of chromosomes
global DEBUG

bound_x = 2.5;  %USING fixed values, MUST BE CHANGED
bound_y = 2.5;
bound_th = deg2rad(25);
delta_t=bound_x*0.1;
delta_th=bound_th*0.05;
bounds_rand = [bound_x bound_y bound_th];

popchr = zeros(nchr,3);

it = 0;

bestfit =[x0 y0 yaw0];

initfit = fitnessGrid(ScanNewTR, Occ, [x0 y0 yaw0]);

maxfit = initfit;

incr_x=bound_x;
incr_y=bound_y;
incr_th=bound_th;

%% Improve error check

while it < niter
    it = it+1;
    % Evaluate our chromosomes using our fitness function FITNESSGRID which
    % checks a small area around each point using a direct lookup. No
    % association is needed
    
    fit = zeros(nchr,1);
    
    maxfiti = -1;
    
    incr_x = incr_x*0.5;
    
    dirs = [ bestfit + [incr_x 0 0];
        bestfit + [-incr_x 0 0] ;
        bestfit + [0 incr_y 0] ;
        bestfit + [0 incr_y 0] ;
        bestfit + [0 0 incr_th] ;
        bestfit + [0 0 -incr_th] ];
    
    for j=1:size(dirs,1)
        [fit(j) TRF(j).grid] = fitnessGrid(ScanNewTR, Occ, dirs(j,:) );
        if fit(j) > maxfit
            maxfit = fit(j);
            maxfiti = j;
        end
    end
    
    if maxfiti > 0
        diffpose = bestfit - dirs(maxfiti,:);
        bestfit = dirs(maxfiti,:);
    else
        diffpose = [diffpo0 0 0];
    end
    
    
    if DEBUG.gmapping || DEBUG.all
        figure;
        hold on
        axis equal
        grid on
        displayPoints(ScanRef,'g',0);
        displayPoints(TRF(maxfiti).grid,'r',0);
    end
    
    err = abs(log(maxfit/bestfit));
    
    if err < 0.15
        break;
    end
    
    
    
end

t = [popchr(maxfiti,1:2)  0]
R = e2q([0 0 popchr(maxfiti,3)])
NI = it;
end

