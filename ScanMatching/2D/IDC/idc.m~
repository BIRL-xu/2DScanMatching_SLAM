%Given two scan, performs an pIC scanmatching. It returns the displacement
%between adiacent points. Being R the 3D rotation in quaternion form and t
%the translation in 3D Being A the old scan and B the new one. The
%point set size does not match. The idea is to find the correnspondence
%between all points of B with a point of A.

%Feng Lu and Evangelos Milios. 1997. Robot Pose Estimation in Unknown
%Environments by Matching 2D Range Scans. J. Intell. Robotics Syst. 18, 3
%(March 1997), 249-275.


function [R, t, NI] = idc(Ai, Bi, motion)

global Opt

%Select which points to use, in this case local cartesian point in
Al.cart = Ai.localCart;
Al.polar = Ai.localPolar;

Bl.cart = Bi.localCart;
Bl.polar = Bi.localPolar;

itMax = Opt.scanmatcher.iterations;
Br = Opt.scanmatcher.Br;   % Angular tolerance
% Br0 = Br;
% alfaBr = 1/(2.5*itMax);
% Br = Br0*exp(1)^alfaBr;
alpha = 0.1;
it=1;       %iteration control

sizeB = size(Bl.cart,1);

% Matrix initialization
B.cart = zeros(sizeB, 2);
B.polar = zeros(sizeB, 2);


%Motion extraction from robot

u = motion.con.u;
%pose = motion.state.x;
pose(3) = 0;
lrangle = u(2);

x0 =  cos(lrangle)*u(1);
y0 =  sin(lrangle)*u(1);
yaw0 = u(3);

x=x0;
y=y0;
yaw=yaw0;

lasterror = [];
corr=[];

B.cart(:,1:2) = Bl.cart(:,1:2);
B.polar(:,1:2) = Bl.polar(:,1:2);

A.cart(:,1:2) = Al.cart(:,1:2);
A.polar(:,1:2) = Al.polar(:,1:2);

BA = B;

xtot = 0;
ytot = 0;
rtot = 0;
global DEBUG
if DEBUG.cpAssociation || DEBUG.all
    scrsz = get(0,'ScreenSize');
    Opt.fighandle=figure('Position',scrsz,'Renderer','zbuffer','doublebuffer','on');
    axis equal;
    xlabel('X (m)'); ylabel('Y (m)');
    hold all
    Opt.plot_r = plot(NaN,NaN,'.r','MarkerSize',6);
    Opt.plot_n = plot(NaN,NaN,'.b','MarkerSize',6);
end

while it < itMax
    
    % reeturn if convergence is achieved
    if checkConv(lasterror, corr)
        break
    end
    
    [Bnf Bf Af] = transPolarCartScan(B, Al, yaw, [x y], 1,Opt.scanmatcher.Br(2));
    Bnf.cart(:,3) =  pose(3); % Delete 1's from normalized 2D point
    Bf.cart(:,3) =  pose(3);
    
    if Opt.scanmatcher.projfilter
        BA = Bf;
        AlA = Af;
    else
        BA = Bnf;
        AlA = Al;
    end    
    
    %Compute the associated point with the Closest Point rule
    [merr assp i1] = cpAssociation(BA,AlA, Opt);
   
    
    %Compute the associated point with the Matching Range rule
    [merr2 assp2 i2] = mpAssociation(BA,AlA, Opt);
    
    Opt.scanmatcher.Br(1) = max(Br(1)*exp(-alpha*it),0.01);
    Br(1)*exp(-alpha*it)

    %Decrease the maximum angular error factor
    

    if ~isempty(Opt.scanmatcher.rejection_rule)
        assp = Opt.scanmatcher.rejection_rule(assp);
        assp2 = Opt.scanmatcher.rejection_rule(assp2);
    end    

    if size(assp.new,1) < 5 || size(assp2.new,1) < 5
        break;
    end
        
    
    %Registrate the scan, Use rotation from IMRP rule if selected
    %[BB ASS] = filterAssMatrix(B.cart, assp,i1);
    [R2 t] = regist_besl(assp.new', assp.ref');
    
    %[BB ASS] = filterAssMatrix(B.cart, assp2.ref,i2);
    [R t2] = regist_besl(assp2.new', assp2.ref');
    
    
    % Apply the shift found to the pose
    yawR = R2e(R);
    yaw = yaw + yawR(3);
    x = x + t(1);
    y = y + t(2);
    
    %Error estimation, keep a vector of the last error estimation
    it=it+1;
    lasterror = [lasterror merr/10];
    corr = [corr; t(1)/10 t(2)/10 yaw/10];
    
    if size(lasterror,2) > Opt.scanmatcher.niterconv
        lasterror = lasterror(2:end);
        corr = corr(2:end,:);
    end
    
    
end

%Final result in quaternion
R = e2q( [0 0 normAngle(yaw-yaw0)] );

t = [x y 0] - [x0 y0 0];

NI = it;
