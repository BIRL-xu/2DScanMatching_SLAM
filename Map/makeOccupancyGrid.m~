function [ O ] = makeOccupancyGrid( A, PARAM )
%OCCUPANCYGRID Initialize an occupancy grid map using a (might be empty) clouds
%of points A and a resolution res. The size is enough to cover all the
%points plus a margin of size 1. The grid expans from xmin to xmax and ymin
%ymax. Values can be negatives and are relatives to robot position. the
%map is represented as a grid of xwide cells from 0 to xwide and y
%calculated as the same. Then, the respective cell where a point P falls is
%calculated taking into account the area represented by the map stored into
%the parameters PARAM. The robot is believed to be in the middle cell.
%Usually xmin and ymin are negative and equal -xmax and -ymax repsectively

% Depending on the type of the map we create in different ways. For
% probabilistic mode, the scan A needs to be presented in Polar
% Coordinates.

L =PARAM.L;
xmin = PARAM.xmin;
xmax = PARAM.xmax;
ymin = PARAM.ymin;
ymax = PARAM.ymax;


sscan = size(A,1);


xwide = abs(xmax - xmin);
ywide = abs(ymax - ymin);


NX = floor(xwide / L)+1;
NY = floor(ywide / L)+1;

O.grid = ones(NX,NY)*-1;
O.PARAM = PARAM;
for i = 1:sscan
    x = A(i,1);
    y = A(i,2);

    switch(O.type)
        
        % In the binary model, only the cell believed to be hit is filled
        case 'binary'
            %Calculate the cell where the point (x,y) should fall in.
            ix1 = min(floor( (abs(xmin) + x) / L)+1,NX);
            iy1 = min(floor( (abs(ymin) + y) / L)+1,NY);
            O.grid(ix1,iy1) = 1;
        case 'probabilistic sonar'
            rangeb = A(i,2);
            angleb = A(i,1);
            
            % calculate the length of the chord by the size of the cell as
            % approximate number of cells to check
            lwidth = floor( ( 2*rangeb*cos(angleb/2) ) / (L*2) );
            rwidth = floor( rangeb / L );
            for j = 1:rwidth
                
                incrr = (rangeb / rwidth) * j;
                if j == rwidth
                    incrr = rangeb;
                end                
                nrangeb = rangeb - incrr;

                for k = -lwidth:1:lwidth
                    
                    % calculate an angular shift and its relative occupancy
                    incra =  (PARAM.bwidth/2)/lwidth * k;
                    nangleb = angleb + incra;
                    [ xp yp] = pol2cart(nangleb ,nrangeb);
                    [ix1 iy1] = getCoordinates( [xp yp], A);
                    pocc = ( ( (PARAM.maxr - nrangeb ) / PARAM.maxr ) + ...
                        ( (PARAM.bwidth - nangleb ) / PARAM.bwidth ) ) / 2;
                    
                    
                    if j == rwidth
                        O.grid(ix1,iy1) = pocc;
                    else
                    % this area is behind the occupied chord so the probability is inverse                     
                        O.grid(ix1,iy1) = 1 - pocc;
                    end

                end
            end
    end
    
end

end




