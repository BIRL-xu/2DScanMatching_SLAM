function [ d ] = pt2lineDistance( p1, p2,p3 )
%PT2LINEDISTANCE return the distance between 1 point and a line give in
%slope intercept form.


sl = pts2line(p2,p3);
q = sl * p2(1) + p2(2);
[a l] = cart2pol(p1(1),p2(2));
 
A = (p1(1)-p2(1))*(p3(1)-p2(1)) + (p1(2)-p2(2))*(p3(2)-p2(2));
B = (p3(1)-p2(1))*(p3(1)-p2(1)) + (p3(2)-p3(2))*(p3(2)-p2(2)) ;
R = A/B;

PX = p2(1) + R*(p3(1) - p2(1));
PY = p2(2) + R*(p3(2) - p2(2));

S =  (p2(2)-p1(2))*(p3(1)-p2(1))-(p2(1)-p1(1))*(p3(2)-p2(2)) / B;
dL = abs(S)*sqrt(B);


	if ( (R >= 0) && (R <= 1) )
	
		d = dL;
	
	else
	

		dist1 = (p1(1)-p2(1))*(p1(1)-p2(1)) + (p1(2)-p2(2))*(p1(2)-p2(2));
		dist2 = (p1(1)-p3(1))*(p1(1)-p3(1)) + (p1(2)-p3(2))*(p1(2)-p3(2));
		
        if (dist1 < dist2)
			P = p2;
			distanceSegment = sqrt(dist1);
		else

			P = p3;
			distanceSegment = sqrt(dist2);
        end


    end





d = abs(det([p3-p2;p1-p2]))/norm(p3-p2); % for row vectors. 
proj = [cos(a)*(d+l) sin(a)*(d+l)];
 
 if proj(1) < p2(1) && proj(2) < p2(2) 
     
     proj(2) < p2(2) && proj(2) < p3(2) 
     
 end
 
end
