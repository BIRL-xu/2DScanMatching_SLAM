function [robot]=KalmanFilter4D_predict(robot)
%[X,P]=KalmanFilter(state,P,At,Z,H,R)
%
%If state, P and At are input of the function it performs a prediction.
%If Z,H and R are also present, an additional correction step is performed. 
%The function returns the new state X and its uncertainty P

global PARAM;
state = robot.state.x;
P = robot.state.P;
u = robot.con.u;
%--RENAME THE STATE VARS---------------------------------------------------
x=cos(u(1))*u(2);
y=sin(u(1))*u(2);
yw=u(3);
z=0;

rott=u(2)+state(4);

J = [ 1 0 0 -sin(rott);
      0  1 0 cos(rott);
       0    0   1   0;
       0    0   0   1];

V = [ cos(rott) -u(1)*sin(rott) 0;
      sin(rott) u(1)*cos(rott) 0;
       0    0   1 ];
   
robot.state.x(1) = state(1) + x;
robot.state.x(2) = state(2) + y;
robot.state.x(3) = state(3) + z;
robot.state.x(4) = normAngle(yw+state(4));
robot.state.P = (J\P)*J' + (V\robot.state.P_Added([1 2 4],[1 2 4]))*V';