function Rob = simMotion(Rob, Tim, Noise)
% SIMMOTION  Simulated robot motion.
%   Rob = SIMMOTION(Rob, Tim) performs one motion step to robot Rob,
%   following the motion model in Rob.motion. The time information Tim is
%   used only if the motion model requires it, but it has to be provided
%   because MOTION is a generic method.

global MotionUncertainty

if(Noise)
    %errStd retrieve an error from a multivariate Gaussian
    %errStd(1) contains the linear error and errStd the angular over the
    %odometry shift. errStd(4) contains the orientation error with respect
    %to the final orientation of the robot
    errd = MotionUncertainty;
    for nn = 1:size(errd,2)
        errStd(nn) = stdErr(0, errd(nn) );
    end
    
else
    %No error is added
    errStd = zeros(1,6);
end

% motion model of the robot:
switch Rob.motion
   
        
    case {'trajectory'}
        
        %Trajectory odometry. The position are taken from the data field
        %trajectory and are in a 6D form [x y z e1 e2 e3 ] with q being a
        %quaternion form. Conversion is necessary to a 4D state [x y z yaw]
        if(Rob.con.incr > 1)
            % Extract the position from the ground truth trajectory and
            % apply proper conversion to 3D.
            oldp = Rob.trajectory(:,Rob.con.incr - Tim.step);
            newp = Rob.trajectory(:,Rob.con.incr);
            initp = [Rob.state0(1:2); Rob.state0(6)];
            oldp = [oldp(1:2); oldp(6)];
            newp = [newp(1:2); newp(6)];  
            
            Rob.state.gt = newp;
            
            % Refer the pose to the initial pose
        
            
            oldp_r = frameRef( oldp, initp, 1);
            oldp_r(3)=oldp(3);
            newp_r = frameRef( newp ,initp, 1);
            newp_r(3)=newp(3);
            
            %Rob.state.x = newp;
            %gt = newp;
            

            % calculate a 2D odometry step and add it to the robot position
            % including the error got from a gaussian
            %shift = calcOdo2D(newp, oldp);
            %Rob.state = odo2(Rob.state,shift);

            %REALODO =  calcOdo2D(newp, oldp)'
            


            %calculate the displacement caused by the error Rob.state.d and
            %update the struct frame containing the latest state
            %information
            
            if strcmp(Rob.error_type,'gaussian')
                disp = [errStd(1) errStd(2) errStd(3)] ;
                newp_r(1:2) = newp_r(1:2)+[disp(1) disp(2)]' ;
                newp_r(3) = normAngle(newp_r(3)+disp(3)) ;
            end
            
            Rob.con.u =  newp_r-oldp_r; %calcOdo2D(newp,oldp ) ;
            
            % DEBUG
            
            Rob.con.incr = Rob.con.incr+Tim.step;
                        
            %only fill Rob.state.d is error was chosen to be added
            if(Noise)
                Rob.state.d = (Rob.state.gt - newp) ;
            else
                Rob.state.d = [0; 0; 0]; % no displacement
            end
        else
            %If it's the first iteration, no information on odometry are
            %passed nor error displacement
            
            Rob.con.incr = Rob.con.incr+Tim.step;
            Rob.state.d = [0; 0; 0];
            Rob.state.u = [0 0 0];
            Rob.state.gt = Rob.state0([1 2 6]);
        end
    otherwise
        error('??? Unknown motion model ''%s''.',Rob.motion);
        
end

